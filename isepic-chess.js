/** Copyright (c) 2012 Ajax Isepic (ajax333221) Licensed MIT *///please ignore the following line:/*jshint indent:4, quotmark:double, onevar:true, undef:true, unused:true, trailing:true, jquery:true, curly:true, es3:true, latedef:nofunc, bitwise:false, sub:true */function strContains(str,str_to_find){	return !!(~str.indexOf(str_to_find));}function countChars(str,char_list_to_count){	return (str.length-(str.replace(RegExp(char_list_to_count,"g"),"")).length);}function bosToPos(bos){	return [(8-(bos.charAt(1)*1)),"abcdefgh".indexOf(bos.charAt(0))];//old: Math.abs(x-8)}function posToBos(pos){	return ("abcdefgh".charAt(pos[1])+""+(8-pos[0]));//old: Math.abs(x-8)}function insideBoard(pos){	return ((pos[0]<8&&pos[0]>-1)&&(pos[1]<8&&pos[1]>-1));}function getValue(pos,obj){	return obj.ChessBoard[pos[0]][pos[1]];}function setValue(pos,new_val,obj){	obj.ChessBoard[pos[0]][pos[1]]=new_val;}function toggleActiveColor(obj){	obj.ActiveColor=!obj.ActiveColor;}function toggleIsRotated(obj){	obj.IsRotated=!obj.IsRotated;}function setPromoteTo(abs_val,obj){	obj.PromoteTo=abs_val;}function getPieceChar(val){	return ["*","p","n","b","r","q","k"][Math.abs(val)];}function countChecks(king_pos,early_break,obj){	var i,j,as_knight,rtn_total_checks;		rtn_total_checks=0;		outer:	for(i=2;i--;){//1...0		as_knight=!i;				for(j=9;--j;){//8...1			if(testIsAttacked(king_pos,j,null,as_knight,obj)){				rtn_total_checks++;								if(early_break){					break outer;				}			}		}	}		return rtn_total_checks;}function setCurrentMove(val,is_goto,obj){	var len,temp;		len=obj.MoveList.length;		if(len>1){		temp=Math.min(Math.max((is_goto?val:val+obj.CurrentMove),0),(len-1));//old: (val+(is_goto?0:obj.CurrentMove))				if(temp-obj.CurrentMove){//old: (x!=y)			obj.CurrentMove=temp;						readFen(obj.MoveList[temp][0],false,obj);			displayBoard(obj);		}	}}function cornerRookTest(rtn_new_castling_availity,file){	if(rtn_new_castling_availity){		if(file>6&&(rtn_new_castling_availity-2)){//short old: (x==7 && y!=2)			rtn_new_castling_availity--;		}else if(!file&&(rtn_new_castling_availity-1)){//long old: (x==0 && y!=1)			rtn_new_castling_availity-=2;		}	}		return rtn_new_castling_availity;}function displayBoard(obj){	var i,j,temp,current_pos,color_toggler,clock_toggler,move_list,pgn_move_list,initial_fullmove,bonus_half,html_board;		html_board="<tbody>";	color_toggler=true;		for(i=0;i<8;i++){//0...7		html_board+="<tr>";				for(j=0;j<8;j++){//0...7			current_pos=(obj.IsRotated?[(7-i),(7-j)]:[i,j]);//old: [Math.abs(i-7),Math.abs(j-7)]			temp=getValue(current_pos,obj);						html_board+="<td class='"+(color_toggler?"w":"b")+"s"+(temp?((temp<0?" b":" w")+""+getPieceChar(temp)):"")+"' id='"+posToBos(current_pos)+"'></td>";			color_toggler=!color_toggler;		}				html_board+="</tr>";		color_toggler=!color_toggler;	}		html_board+="</tbody>";		move_list=obj.MoveList;	bonus_half=(strContains(move_list[0][0]," b ")/2);//old: (x?0.5:0)	initial_fullmove=obj.InitialFullMove;	pgn_move_list="";		//old: clock_toggler=(!bonus_half!=!(i%2)) not exactly equivalent (one is bol, the other num)	for(i=move_list.length,clock_toggler=((bonus_half*2)-(i%2));--i;){//len...1		clock_toggler=!clock_toggler;/*NO move below, normalizes num-bol the first time*/				pgn_move_list=(i-1?" ":"")+(clock_toggler?("<span class='xpgn_number'>"+(initial_fullmove+Math.floor(((i-1)/2)+bonus_half))+".</span>"):"")+"<span id='xpgn"+i+"' class='xpgn_"+(i-obj.CurrentMove?"goto":"active")+"'>"+move_list[i][1]+"</span>"+pgn_move_list;//old: (x!=y)	}		if(bonus_half&&pgn_move_list){		pgn_move_list="<span class='xpgn_number'>"+initial_fullmove+"...</span>"+pgn_move_list;	}		if(!$("#xchessboard").length){		$("body").append("<div id='xchessboard'><table id='xboard' cellpadding='0' cellspacing='0'></table><div id='xcontrols'><input id='xfen' value='' type='text'><br><input id='xgoto0' value='|<' type='button'> <input id='xgoto1' value='<' type='button'> <input id='xgoto2' value='>' type='button'> <input id='xgoto3' value='>|' type='button'> | <input id='xrotate' value='rotate' type='button'> | <select id='xpromote'><option value='5' selected='selected'>queen</option><option value='4'>rook</option><option value='3'>bishop</option><option value='2'>knight</option></select><hr><p id='xmovelist'></p></div></div>");				$("#xfen").click(function(){$(this).select();});		$("#xgoto0").click(function(){setCurrentMove(0,true,obj);});		$("#xgoto1").click(function(){setCurrentMove(-1,false,obj);});		$("#xgoto2").click(function(){setCurrentMove(1,false,obj);});		$("#xgoto3").click(function(){setCurrentMove(10000,true,obj);});				$("#xrotate").click(function(){			toggleIsRotated(obj);			displayBoard(obj);		});				$("#xpromote").change(function(){			setPromoteTo(($(this).val()*1),obj);		});	}		$("#xboard").html(html_board);	$("#xfen").val(obj.Fen);	$("#xmovelist").html(pgn_move_list+"<br><pre>is_black_turn:"+obj.ActiveColor+"<br>active_checks:"+obj.ActiveChecks+"<br>w_castling:"+obj.WCastling+"<br>b_castling:"+obj.BCastling+"<br>en_passant:"+(obj.EnPassantBos||"-")+"<br>active_king_pos:"+posToBos(obj.ActiveKingPos)+"<br>non_active_king_pos:"+posToBos(obj.NonActiveKingPos)+"</pre>");/*aaaaaaa debug aaaaaaaaaaa*/		$(".xpgn_goto").click(function(){setCurrentMove((this.id.substring(4)*1),true,obj);});		if(obj.CurrentMove){		$("#"+move_list[obj.CurrentMove][2][0]).addClass("lastmove");		$("#"+move_list[obj.CurrentMove][2][1]).addClass("lastmove");	}		UGLY_FUNCTION();/*nnnnnnnnn*/}function initBoard(board_name,fen,rotate_board){	var target_board;		target_board=window[board_name]={		ChessBoard:null,		Fen:null,		ActiveColor:null,		ActiveChecks:null,		WCastling:null,		BCastling:null,		EnPassantBos:null,		HalfMove:null,		FullMove:null,		ActiveKingPos:null,		NonActiveKingPos:null,		InitialFullMove:null,		MoveList:null,		CurrentMove:null,		IsRotated:null,		PromoteTo:null	};		readFen(fen,true,target_board);		if(rotate_board){		toggleIsRotated(target_board);	}		displayBoard(target_board);}function readFen(fen,is_creating,obj){	var i,j,len,temp,temp2,fen_board_arr,current_file,skip_files,piece_char,fen_parts;		if(is_creating){		if(typeof fen!=="string"){			fen="";		}				fen=fen.replace(/^\s+|\s+$/g,"").replace(/\s\s+/g," ");		fen=(preFenValidation(fen)?fen:"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1");	}		fen_parts=fen.split(" ");	fen_board_arr=fen_parts[0].split("/");		obj.ChessBoard=new Array(8);		for(i=8;i--;){//7...0		obj.ChessBoard[i]=[0,0,0,0,0,0,0,0];		current_file=0;				for(j=0,len=fen_board_arr[i].length;j<len;j++){//0<len			temp=fen_board_arr[i].charAt(j);			skip_files=(temp*1);						if(!skip_files){				piece_char=temp.toLowerCase();				setValue([i,current_file],("*pnbrqk".indexOf(piece_char)*(temp==piece_char?-1:1)),obj);/*NO simplf, son strs not nums*/			}						current_file+=(skip_files||1);						//old:			//			//if(skip_files){			//	current_file+=skip_files;			//}else{			//	piece_char=temp.toLowerCase();			//	setValue([i,current_file],("*pnbrqk".indexOf(piece_char)*(temp==piece_char?-1:1)),obj);			//	current_file++;			//}		}	}		obj.ActiveColor=(fen_parts[1]=="b");		temp2=fen_parts[2];	obj.WCastling=(strContains(temp2,"K")+(strContains(temp2,"Q")*2));//old: (x?1:0)+(y?2:0)	obj.BCastling=(strContains(temp2,"k")+(strContains(temp2,"q")*2));//old: (x?1:0)+(y?2:0)		obj.EnPassantBos=fen_parts[3].replace("-","");		obj.HalfMove=(fen_parts[4]*1)||0;	obj.FullMove=(fen_parts[5]*1)||1;		refreshKingAndFen(obj);		if(is_creating){		obj.InitialFullMove=obj.FullMove;		obj.MoveList=[[fen,"",["",""]]];		obj.CurrentMove=0;		obj.IsRotated=false;		obj.PromoteTo=5;				if(!postFenValidation(obj)){			readFen(null,true,obj);//old: 'is_creating' as true		}	}}function refreshKingAndFen(obj){	var i,j,piece_char,current_pos,current_val,empty_squares_at_the_left,new_fen_board,current_is_black,castling_holder;		new_fen_board="";	castling_holder=["","k","q","kq"];		for(i=0;i<8;i++){//0...7		empty_squares_at_the_left=0;				for(j=0;j<8;j++){//0...7			current_pos=[i,j];			current_val=getValue(current_pos,obj);						if(current_val){				if(empty_squares_at_the_left){/*NO simplf*/					new_fen_board+=""+empty_squares_at_the_left;					empty_squares_at_the_left=0;				}								current_is_black=(current_val<0);								if((current_is_black?-current_val:current_val)>5){//old: (current_val*(x?-1:1)), (x==6)					if(obj.ActiveColor==current_is_black){						obj.ActiveKingPos=current_pos;					}else{						obj.NonActiveKingPos=current_pos;					}				}								piece_char=getPieceChar(current_val);				new_fen_board+=""+(current_is_black?piece_char:piece_char.toUpperCase());			}else{				empty_squares_at_the_left++;			}		}				new_fen_board+=""+(empty_squares_at_the_left||"")+(i-7?"/":"");//old: (x!=y)	}		obj.ActiveChecks=countChecks(obj.ActiveKingPos,false,obj);		obj.Fen=(new_fen_board+" "+(obj.ActiveColor?"b":"w")+" "+((castling_holder[obj.WCastling].toUpperCase()+""+castling_holder[obj.BCastling])||"-")+" "+(obj.EnPassantBos||"-")+" "+obj.HalfMove+" "+obj.FullMove);}function preFenValidation(fen){	var i,j,len,temp,optional_clocks,last_is_num,current_is_num,fen_board_arr,piece_char,total_pieces,fen_board,total_files_in_current_row,keep_going,rtn_is_legal;		rtn_is_legal=false;		if(fen){		optional_clocks=fen.replace(/^([rnbqkRNBQK1-8]+\/)([rnbqkpRNBQKP1-8]+\/){6}([rnbqkRNBQK1-8]+)\s[bw]\s(-|K?Q?k?q?)\s(-|[a-h][36])($|\s)/,"");		keep_going=(fen.length-optional_clocks.length);//old: (x!=y)				if(keep_going){			if(optional_clocks.length){				keep_going=(/^(0|[1-9][0-9]*)\s([1-9][0-9]*)$/.test(optional_clocks));			}						if(keep_going){				fen_board=fen.split(" ")[0];								if((countChars(fen_board,"K")==1)&&(countChars(fen_board,"k")==1)){					fen_board_arr=fen_board.split("/");										outer:					for(i=8;i--;){//7...0						total_files_in_current_row=0;						last_is_num=false;												/*reverse? mmm*/						for(j=0,len=fen_board_arr[i].length;j<len;j++){//0<len							temp=(fen_board_arr[i].charAt(j)*1);							current_is_num=!!temp;														if(last_is_num&&current_is_num){								keep_going=false;								break outer;							}														last_is_num=current_is_num;														total_files_in_current_row+=(temp||1);						}												if(total_files_in_current_row-8){//old: (x!=8)							keep_going=false;							break;						}					}										if(keep_going){						for(i=2;i--;){//1...0							total_pieces=new Array(5);														for(j=5;j--;){//4...0								piece_char=getPieceChar(j+1);								if(i){piece_char=piece_char.toUpperCase();}																total_pieces[j]=countChars(fen_board,piece_char);							}														if((total_pieces[0]>8)||((Math.max(total_pieces[1]-2,0)+Math.max(total_pieces[2]-2,0)+Math.max(total_pieces[3]-2,0)+Math.max(total_pieces[4]-1,0))>(8-total_pieces[0]))){//old: (!((x<9)&&((...)<=(8-x))))								keep_going=false;								break;							}						}												rtn_is_legal=keep_going;					}				}			}		}	}		return rtn_is_legal;}function postFenValidation(obj){	var i,j,k,temp,temp2,active_color,current_sign,keep_going,en_passant_pos,current_castling_availity,current_king_rank,en_passant_rank,en_passant_file,fen_board,total_pawns_in_current_file,min_captured,min_captured_holder,rtn_is_legal;		rtn_is_legal=false;	active_color=obj.ActiveColor;		if(obj.HalfMove<=((2*obj.FullMove)-2+active_color)){//old: (... <= (((obj.FullMove-1)*2)+active_color))		if(obj.ActiveKingPos&&obj.NonActiveKingPos){			/*slopy test to see if there is a w and b king, (-5 + 5 or 5 + -5) = 0*/			/*NOTE: can kings be swapped? does that make any difference?*/			if((Math.abs(getValue(obj.ActiveKingPos,obj))>5)&&!(getValue(obj.ActiveKingPos,obj)+getValue(obj.NonActiveKingPos,obj))){//old: (y==6)				if(obj.ActiveChecks<3){					toggleActiveColor(obj);					keep_going=!countChecks(obj.NonActiveKingPos,true,obj);					toggleActiveColor(obj);										if(keep_going){						if(obj.EnPassantBos){							temp=((active_color*2)-1);//old: (x?1:-1)							en_passant_pos=bosToPos(obj.EnPassantBos);														en_passant_rank=en_passant_pos[0];							en_passant_file=en_passant_pos[1];														/*negar todo permite salvar?*/							keep_going=(!obj.HalfMove&&!getValue(en_passant_pos,obj)&&en_passant_rank==((active_color*3)+2)&&!getValue([(en_passant_rank+temp),en_passant_file],obj)&&(getValue([(en_passant_rank-temp),en_passant_file],obj)==temp));//old: (x?5:2)						}												if(keep_going){							fen_board=obj.Fen.split(" ")[0];														for(i=2;i--;){//1...0								min_captured=0;																for(j=8;j--;){//7...0									min_captured_holder=(j&&(j-7))?[1,2,4,6,9]:[1,3,6,10,99];//old: !(j==0 || j==7)									temp2="";																		for(k=8;k--;){//7...0										temp2+="#"+(getValue([k,j],obj)||"");									}																		total_pawns_in_current_file=(countChars(temp2,(i?"#-1":"#1"))/(i+2));//old: (x?3:2)																		if(total_pawns_in_current_file>1){										min_captured+=min_captured_holder[total_pawns_in_current_file-2];									}								}																if(min_captured>(15-countChars(fen_board,(i?"P|N|B|R|Q":"p|n|b|r|q")))){									keep_going=false;									break;								}							}														if(keep_going){								for(i=2;i--;){//1...0									current_castling_availity=(i?obj.WCastling:obj.BCastling);																		if(current_castling_availity){										current_sign=((i*2)-1);//old: (x?1:-1)										current_king_rank=(i*7);//old: (x?7:0)																				if(getValue([current_king_rank,4],obj)-(current_sign*6)){//old: (y!=(x?6:-6))											keep_going=false;										}else if(current_castling_availity-2&&(getValue([current_king_rank,7],obj)-(current_sign*4))){//old: (x!=2 && y!=z)											keep_going=false;										}else if(current_castling_availity-1&&(getValue([current_king_rank,0],obj)-(current_sign*4))){//old: (x!=1 && y!=z)											keep_going=false;										}									}																		if(!keep_going){										break;									}								}																rtn_is_legal=keep_going;							}						}					}				}			}		}	}		return rtn_is_legal;}function testCandidateMoves(initial_pos,piece_direction,total_squares,as_knight,allow_capture,obj){	return testCollision(initial_pos,piece_direction,total_squares,as_knight,allow_capture,false,null,obj)[0];}function testIsAttacked(initial_pos,piece_direction,total_squares,as_knight,obj){	return testCollision(initial_pos,piece_direction,total_squares,as_knight,false,true,null,obj)[1];}function testDisambiguationPos(initial_pos,piece_direction,total_squares,as_knight,ally_abs_val,obj){	return testCollision(initial_pos,piece_direction,total_squares,as_knight,false,false,ally_abs_val,obj)[2];}function testCollision(initial_pos,piece_direction,total_squares,as_knight,allow_capture,request_is_attacked,ally_abs_val,obj){	var i,move_by,current_rank,current_file,current_pos,current_val,impossible_to_name,movement_holder,rtn_arr_pos,rtn_is_attacked,rtn_ally_pos;		movement_holder=as_knight?[[-2,1],[-1,2],[1,2],[2,1],[2,-1],[1,-2],[-1,-2],[-2,-1]]:[[-1,0],[-1,1],[0,1],[1,1],[1,0],[1,-1],[0,-1],[-1,-1]];		rtn_arr_pos=[];	rtn_is_attacked=false;	rtn_ally_pos=[];	total_squares=(as_knight?1:(total_squares||7));/*NO use math max 7, even if 999 the loop breaks on outside board*/	move_by=movement_holder[piece_direction-1];		current_rank=initial_pos[0];	current_file=initial_pos[1];		for(i=0;i<total_squares;i++){//0<total_squares		current_rank+=move_by[0];		current_file+=move_by[1];		current_pos=[current_rank,current_file];				if(!insideBoard(current_pos)){			break;		}				current_val=getValue(current_pos,obj);				if(current_val){			impossible_to_name=(obj.ActiveColor?current_val:-current_val);//old: (current_val*(x?1:-1))						if(impossible_to_name>0){//old: if((obj.ActiveColor&&current_val>0)||(!obj.ActiveColor&&current_val<0)){				if(request_is_attacked){					if(as_knight){						if(impossible_to_name==2){//knight							rtn_is_attacked=true;						}					}else if(impossible_to_name>5){//king, old: (x==6)						if(!i){							rtn_is_attacked=true;						}					}else if(impossible_to_name>4){//queen, old: (x==5)						rtn_is_attacked=true;					}else if(piece_direction%2){						if(impossible_to_name>3){//rook, old: (x==4)							rtn_is_attacked=true;						}										/*NO >2, we can collide with rooks*/					}else if(impossible_to_name==3){//bishop						rtn_is_attacked=true;					}else if(!i&&impossible_to_name<2){//old: (... && x==1)						if(~current_val){//w_pawn, old: (x!=-1)							if(piece_direction>3&&piece_direction<7){//old: (x==4 || x==6)								rtn_is_attacked=true;							}						}else{//b_pawn							/*NO merge in a single else if, the minimizer will do this*/							if(piece_direction<3||piece_direction>7){//old: (x==2 || x==8)								rtn_is_attacked=true;							}						}					}				}								if(allow_capture&&impossible_to_name-6){//old: (... && x!=6)					rtn_arr_pos.push(current_pos);				}			}else if(ally_abs_val==-impossible_to_name){				rtn_ally_pos=current_pos;			}						break;		}				rtn_arr_pos.push(current_pos);	}		return [rtn_arr_pos,rtn_is_attacked,rtn_ally_pos];}function legalMoves(piece_pos,obj){	var i,j,len,len2,temp,temp2,temp_board,active_color,non_active_sign,facing_rank,current_adjacent_file,piece_val,impossible_to_name,current_pos,current_diagonal_pawn_pos,pre_validated_arr_pos,can_castle_current_side,active_color_king_rank,is_king,as_knight,en_passant_capturable_bos,en_passant_bos,piece_rank,active_castling_availity,rtn_validated_arr_pos;		rtn_validated_arr_pos=[];		if(insideBoard(piece_pos)){		temp_board=window["xlegal"]=JSON.parse(JSON.stringify(obj));				active_color=temp_board.ActiveColor;		non_active_sign=((active_color*2)-1);//old: (x?1:-1)				piece_val=getValue(piece_pos,temp_board);		impossible_to_name=(piece_val*-non_active_sign);				if(impossible_to_name>0){//old: if((active_color&&piece_val<0)||(!active_color&&piece_val>0)){			pre_validated_arr_pos=[];						en_passant_capturable_bos="";			en_passant_bos=temp_board.EnPassantBos;						is_king=(impossible_to_name>5);//old: (x==6)			active_color_king_rank=(!active_color*7);//old: (x?0:7)						if(is_king){//king				for(i=9;--i;){//8...1					if((temp=testCandidateMoves(piece_pos,i,1,false,true,temp_board)).length){pre_validated_arr_pos.push(temp);}				}								active_castling_availity=(active_color?temp_board.BCastling:temp_board.WCastling);								if(active_castling_availity&&!temp_board.ActiveChecks&&posToBos(piece_pos)==("e"+(8-active_color_king_rank))){//old: Math.abs(x-8)					for(i=2;i--;){//1...0						if(active_castling_availity-2+i){//old: (y != (x?1:2))							if(testCandidateMoves(piece_pos,(i?7:3),(i+2),false,false,temp_board).length==(i+2)){//old: (x?3:2)								can_castle_current_side=true;																for(j=2;j--;){//1...0									if(countChecks([active_color_king_rank,(j+(i?2:5))],true,temp_board)){//3...2 or 6...5										can_castle_current_side=false;										break;									}								}																if(can_castle_current_side){									pre_validated_arr_pos.push([[active_color_king_rank,(i?2:6)]]);								}							}						}					}										/*NO revert original king pos, temp_board will get overwritten soon*/				}			}else if(impossible_to_name<2){//pawn, old: (x==1)				piece_rank=piece_pos[0];								if((temp=testCandidateMoves(piece_pos,((active_color*4)+1),((piece_rank==(active_color_king_rank+non_active_sign))+1),false,false,temp_board)).length){pre_validated_arr_pos.push(temp);}//old: (x?5:1),((piece_rank==x)?2:1)								facing_rank=(piece_rank+non_active_sign);								for(i=2;i--;){//1...0					current_adjacent_file=((i*2)-1+piece_pos[1]);//old: (piece_pos[1]+(x?1:-1))					current_diagonal_pawn_pos=[facing_rank,current_adjacent_file];										if(insideBoard(current_diagonal_pawn_pos)){						temp2=(getValue(current_diagonal_pawn_pos,temp_board)*non_active_sign);												/*NO use (x && ...), we have negative numbers too*/						if(temp2>0&&temp2-6){//old: (x>0 && x!=6)							pre_validated_arr_pos.push([current_diagonal_pawn_pos]);						}else if(posToBos(current_diagonal_pawn_pos)==en_passant_bos){							en_passant_capturable_bos=posToBos([piece_rank,current_adjacent_file]);							pre_validated_arr_pos.push([current_diagonal_pawn_pos]);						}					}				}			}else{//knight, bishop, rook, queen				as_knight=(impossible_to_name<3);//old: (x==2)								for(i=2;i--;){//1...0					for(j=(impossible_to_name-3-i?8:0)+i;--j>0;){//(x!=4): 8,6,4,2, (x!=3): 7,5,3,1, (else) 8,6,4,2,7,5,3,1						if((temp=testCandidateMoves(piece_pos,j--,null,as_knight,true,temp_board)).length){pre_validated_arr_pos.push(temp);}					}				}								//old:				//for(i=(x-4?9:1);--i;){i--;}//8,6,4,2, old: (x!=4?9:1)				//for(i=(x-3?9:1);--i;){--i;}//7,5,3,1, old: (x!=3?9:1)			}						/*reverse x2?*/			for(i=0,len=pre_validated_arr_pos.length;i<len;i++){//0<len				for(j=0,len2=pre_validated_arr_pos[i].length;j<len2;j++){//0<len2					temp_board=window["xlegal"]=JSON.parse(JSON.stringify(obj));					current_pos=pre_validated_arr_pos[i][j];										setValue(piece_pos,0,temp_board);					setValue(current_pos,piece_val,temp_board);										if(en_passant_capturable_bos&&(posToBos(current_pos)==en_passant_bos)){						setValue(bosToPos(en_passant_capturable_bos),0,temp_board);					}										if(!countChecks((is_king?current_pos:temp_board.ActiveKingPos),true,temp_board)){						rtn_validated_arr_pos.push(current_pos);					}				}			}		}				window["xlegal"]=null;/*porque "temp_board=null" no funciona?*/	}		return rtn_validated_arr_pos;}function moveCaller(initial_pos,final_pos,obj){	var rtn_moved;		rtn_moved=false;		if(insideBoard(final_pos)){		if(strContains(legalMoves(initial_pos,obj).join(""),final_pos.join())){			rtn_moved=true;						makeMove(initial_pos,final_pos,obj);		}	}		return rtn_moved;}function makeMove(initial_pos,final_pos,obj){	var active_color,active_sign,active_color_king_rank,pawn_moved,promoted_val,piece_val,piece_abs_val,initial_bos,final_bos,destination_file_char,active_color_rook,new_en_passant_bos,new_active_castling_availity,new_non_active_castling_availity,king_castled,non_en_passant_capture,to_promotion_rank,pgn_move,castling_holder;		castling_holder=[obj.WCastling,obj.BCastling];		initial_bos=posToBos(initial_pos);	final_bos=posToBos(final_pos);		active_color=obj.ActiveColor;	active_sign=((active_color*-2)+1);//old: (x?-1:1)	active_color_rook=(4*active_sign);		pawn_moved=false;	new_en_passant_bos="";	promoted_val=0;	king_castled=0;	non_en_passant_capture=getValue(final_pos,obj);		new_active_castling_availity=castling_holder[active_color*1];//old: (x?1:0)	new_non_active_castling_availity=castling_holder[!active_color*1];//old: (x?0:1)		to_promotion_rank=(final_pos[0]==(active_color*7));//old: (x?7:0)	active_color_king_rank=(!active_color*7);//old: (x?0:7)		piece_val=getValue(initial_pos,obj);	piece_abs_val=(piece_val*active_sign);//old: Math.abs(piece_val)		if(piece_abs_val>5){//king, old: (x==6)		new_active_castling_availity=0;				if(Math.abs(initial_pos[1]-final_pos[1])>1){			if(final_pos[1]==6){//short				king_castled=1;								setValue([active_color_king_rank,5],active_color_rook,obj);				setValue([active_color_king_rank,7],0,obj);			}else if(final_pos[1]==2){//long				king_castled=2;								setValue([active_color_king_rank,3],active_color_rook,obj);				setValue([active_color_king_rank,0],0,obj);			}		}	}else if(piece_abs_val<2){//pawn, old: (x==1)		pawn_moved=true;				destination_file_char=final_bos.charAt(0);				if(Math.abs(initial_pos[0]-final_pos[0])>1){//new enpass			new_en_passant_bos=(destination_file_char+""+((active_color*3)+3));//old: (x?6:3)		}else if(final_bos==obj.EnPassantBos){//pawn x enpass			setValue(bosToPos(destination_file_char+""+(5-active_color)),0,obj);//old: (x?4:5)		}else if(to_promotion_rank){//promotion			promoted_val=(obj.PromoteTo*active_sign);		}	}		pgn_move=getNotation(initial_bos,final_bos,piece_abs_val,promoted_val,king_castled,non_en_passant_capture,obj);/*NO move below*/		obj.HalfMove++;	if(pawn_moved||non_en_passant_capture){		obj.HalfMove=0;	}		if(piece_abs_val==4&&initial_pos[0]==active_color_king_rank){		new_active_castling_availity=cornerRookTest(new_active_castling_availity,initial_pos[1]);	}		if(non_en_passant_capture==-active_color_rook&&to_promotion_rank){		new_non_active_castling_availity=cornerRookTest(new_non_active_castling_availity,final_pos[1]);	}		if(active_color_king_rank){//white moving		obj.WCastling=new_active_castling_availity;		obj.BCastling=new_non_active_castling_availity;	}else{//black moving		obj.FullMove++;				obj.WCastling=new_non_active_castling_availity;		obj.BCastling=new_active_castling_availity;	}		obj.EnPassantBos=new_en_passant_bos;/*NO move this up*/		setValue(final_pos,(promoted_val||piece_val),obj);	setValue(initial_pos,0,obj);		toggleActiveColor(obj);		refreshKingAndFen(obj);		obj.CurrentMove++;		if(obj.CurrentMove-obj.MoveList.length){//old: (x!=y)		obj.MoveList=obj.MoveList.slice(0,obj.CurrentMove);/*or start a variation?*/	}		obj.MoveList.push([obj.Fen,(pgn_move+(obj.ActiveChecks?"+":"")),[initial_bos,final_bos]]);/*# con mate*/		displayBoard(obj);}function getNotation(initial_bos,final_bos,piece_abs_val,promoted_val,king_castled,non_en_passant_capture,obj){	var i,j,len,temp,temp2,temp3,initial_file_char,initial_rank_char,final_pos,collition_bos,ambiguity,as_knight,rtn_move_notation;		rtn_move_notation="";	initial_file_char=initial_bos.charAt(0);		if(king_castled){//castling king		rtn_move_notation+=(king_castled-1?"O-O-O":"O-O");//old: (x!=1)	}else if(piece_abs_val<2){//pawn, old: (x==1)		if(initial_file_char!=final_bos.charAt(0)){			rtn_move_notation+=(initial_file_char+"x");		}				rtn_move_notation+=final_bos;				if(promoted_val){			rtn_move_notation+=("="+getPieceChar(promoted_val).toUpperCase());		}	}else{//knight, bishop, rook, queen, non-castling king		rtn_move_notation+=getPieceChar(piece_abs_val).toUpperCase();				if(piece_abs_val-6){//knight, bishop, rook, queen, old: (x!=6)			temp2=[];			final_pos=bosToPos(final_bos);			as_knight=(piece_abs_val<3);//old: (x==2)						for(i=2;i--;){//1...0				for(j=(piece_abs_val-3-i?8:0)+i;--j>0;){//(x!=4): 8,6,4,2, (x!=3): 7,5,3,1, (else) 8,6,4,2,7,5,3,1					if((temp=testDisambiguationPos(final_pos,j--,null,as_knight,piece_abs_val,obj)).length){temp2.push(temp);}				}			}						//old:			//for(i=(x-4?9:1);--i;){i--;}//8,6,4,2, old: (x!=4?9:1)			//for(i=(x-3?9:1);--i;){--i;}//7,5,3,1, old: (x!=3?9:1)						len=temp2.length;			if(len>1){				temp3="";								/*reverse?*/				for(i=0;i<len;i++){//0<len					collition_bos=posToBos(temp2[i]);										if(collition_bos!=initial_bos){						if(strContains(legalMoves(temp2[i],obj).join(""),final_pos.join())){							temp3+=collition_bos;						}					}				}								if(temp3){					initial_rank_char=initial_bos.charAt(1);					ambiguity=(strContains(temp3,initial_file_char)+(strContains(temp3,initial_rank_char)*2));										if(ambiguity-1){//0, 2, 3 old: (x!=y)						rtn_move_notation+=initial_file_char;					}										if(ambiguity&&ambiguity-2){//1, 3 old: ((z!=0) && (x!=y))						rtn_move_notation+=initial_rank_char;					}										//old:					//					//if(ambiguity>2){//old: (x==3)					//	rtn_move_notation+=(initial_file_char+""+initial_rank_char);					//}else if(ambiguity-1){//old: (x!=1)					//	rtn_move_notation+=initial_file_char;					//}else{					//	rtn_move_notation+=initial_rank_char;					//}				}			}		}				if(non_en_passant_capture){			rtn_move_notation+="x";		}				rtn_move_notation+=final_bos;	}		return rtn_move_notation;}/*-----------*/var UGLY_GLOBAL="";function UGLY_FUNCTION(){	$(".ws,.bs").click(function(){		var i,len,temp,legal_moves;				if(UGLY_GLOBAL){			$(".ws,.bs").unbind("click");			$(".highlight").removeClass("highlight");						temp=UGLY_GLOBAL;			UGLY_GLOBAL="";						if(!moveCaller(bosToPos(temp),bosToPos(this.id),xboard)){				UGLY_FUNCTION();			}		}else{			legal_moves=legalMoves(bosToPos(this.id),xboard);			len=legal_moves.length;						if(len){				UGLY_GLOBAL=this.id;				$(this).addClass("highlight");								for(i=0;i<len;i++){					$("#"+posToBos(legal_moves[i])).addClass("highlight");				}			}		}	});}