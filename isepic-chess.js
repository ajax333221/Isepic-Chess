/** Copyright (c) 2012 Ajax Isepic (ajax333221) Licensed MIT */function preLegalFen(fen_complete){	var i,j,len,rexp,rows,piece_char,num_pieces,fen_parts,fen_first,fen_len,num_rows,first_last_rows,keep_going,rtn_val;		rtn_val=false;		if(fen_complete){		fen_parts=fen_complete.split(" ",6);				if(fen_parts.length>3){			fen_first=fen_parts[0];			rows=fen_first.split("/");						if(rows.length==8){				fen_len=fen_first.length;								if(((fen_len-(fen_first.replace(/K/g,"").length))==1)&&((fen_len-(fen_first.replace(/k/g,"").length))==1)){					first_last_rows=rows[0]+""+rows[7];										if(first_last_rows.replace(/p/gi,"").length==first_last_rows.length){						keep_going=true;												outer:						for(i=8;i--;){//7...0							num_rows=0;														for(j=0,len=rows[i].length;j<len;j++){//0...rows.len								num_rows+=(rows[i].charAt(j)*1)||1;							}														if(num_rows!=8){								keep_going=false;								break outer;							}						}												if(keep_going){														outer:							for(i=2;i--;){//1...0								num_pieces=new Array(5);																for(j=5;j--;){//4...0									piece_char=PiecesNames.charAt(j+1);									if(i){piece_char=piece_char.toUpperCase();}																		rexp=new RegExp(piece_char,"g");									num_pieces[j]=fen_len-(fen_first.replace(rexp,"").length);								}																if(!((num_pieces[0]<9)&&((Math.max(num_pieces[1]-2,0)+Math.max(num_pieces[2]-2,0)+Math.max(num_pieces[3]-2,0)+Math.max(num_pieces[4]-1,0))<=(8-num_pieces[0])))){									keep_going=false;									break outer;								}							}														if(keep_going){								rtn_val=true;							}						}					}				}			}		}	}		return rtn_val;}function postLegalFen(){	var i,j,k,temp,temp2,temp3,keep_going,enpass_pos,enpass_row,enpass_col,fen_first,num_pawns,missing_capturables,min_captured,min_captured_holder,rtn_val;		rtn_val=false;		if(WKingPos&&BKingPos){		if((getSquare(WKingPos)==6)&&(getSquare(BKingPos)==-6)){			if(ActiveChecks<3){				toggleActive();				keep_going=countChecks(true,null);				toggleActive();								if(!keep_going){					keep_going=true;										if(EnPassant){						keep_going=false;						enpass_pos=strToArr(EnPassant);						enpass_row=enpass_pos[0];						enpass_col=enpass_pos[1];												if(!getSquare(enpass_pos)){							if(ActiveColor){								temp=5;								temp2=1;							}else{								temp=2;								temp2=-1;							}														if(enpass_row==temp&&!getSquare([enpass_row+temp2,enpass_col])&&(getSquare([enpass_row+(-temp2),enpass_col])==temp2)){								keep_going=true;							}						}					}										if(keep_going){						fen_first=Fen.split(" ")[0];												outer:						for(k=2;k--;){//1...0							missing_capturables=15-(fen_first.length-(fen_first.replace((!k?/P|N|B|R|Q/g:/p|n|b|r|q/g),"").length));							min_captured=0;														for(i=8;i--;){//7...0								min_captured_holder=((i==7)||!i)?[1,3,6,10,99]:[1,2,4,6,9];								temp3="..";																for(j=8;j--;){//7...0									temp3+=(getSquare([j,i])||"")+"..";								}																num_pawns=temp3.match(!k?/\.-1\./g:/\.1\./g);								num_pawns=num_pawns?num_pawns.length:0;																if(num_pawns>1){									min_captured+=min_captured_holder[num_pawns-2];								}							}														if(min_captured>missing_capturables){								keep_going=false;								break outer;							}						}												if(keep_going){							rtn_val=true;						}					}				}			}		}	}		return rtn_val;}function countChecks(early_break,custom_pos){	var i,j,king_pos,rtn_val;		rtn_val=0;	king_pos=custom_pos||(ActiveColor?BKingPos:WKingPos);		outer:	for(i=2;i--;){//1...0		for(j=9;--j;){//8...1			if(testCollision(king_pos,j,null,!i,false,true)[1]){				rtn_val++;								if(early_break){					break outer;				}			}		}	}		return rtn_val;}function toggleActive(){	//updates: ActiveColor	ActiveColor=(!ActiveColor)*1;}function strToArr(string_pos){	return [Math.abs((string_pos.charAt(1)*1)-8),AbcLabels.indexOf(string_pos.charAt(0))];}function arrToStr(pos){	return AbcLabels.charAt(pos[1])+""+Math.abs(pos[0]-8);}function getSquare(pos){	return ChessBoard[pos[0]][pos[1]];}function setSquare(pos,new_val){	ChessBoard[pos[0]][pos[1]]=new_val;}function inBoard(pos){	return ((pos[0]<8&&pos[0]>-1)&&(pos[1]<8&&pos[1]>-1));}function emptyBoard(){	//updates: ChessBoard	var i;		ChessBoard=new Array(8);		for(i=8;i--;){//7...0		ChessBoard[i]=[0,0,0,0,0,0,0,0];	}}function writeBoard(complete_fen){	var i,j,sqr_color,html_board;		if(!$("#xchessboard").length){		html_board="<div id='xchessboard'><table cellpadding='0' cellspacing='0'><tbody>";		sqr_color=true;				for(i=9;--i;){//8...1			html_board+="<tr>";						for(j=0;j<8;j++){//0...7				html_board+="<td class='"+(sqr_color?"w":"b")+"s' id='"+(AbcLabels.charAt(j)+""+i)+"'></td>";				sqr_color=!sqr_color;			}						sqr_color=!sqr_color;			html_board+="</tr>";		}				html_board+="</tbody></table><input id='xfen' type='text' /></div>";		$("body").append(html_board);	}		setFEN(complete_fen);}function setFEN(complete_fen){	//updates: ChessBoard, ActiveColor, (W/B)Castling, EnPassant, (Half/Full)Move	var i,j,len,temp,temp2,temp3,rows,piece_char,fen_parts,empty_sqrs;		emptyBoard();		complete_fen=preLegalFen(complete_fen)?complete_fen:DefaultFen;	fen_parts=complete_fen.split(" ");	rows=fen_parts[0].split("/");		for(i=0;i<8;i++){//0...7		temp=i*8;				for(j=0,len=rows[i].length;j<len;j++){//0<rows.len			temp2=rows[i].charAt(j);			empty_sqrs=temp2*1;						if(empty_sqrs){				temp+=empty_sqrs;			}else{				piece_char=temp2.toLowerCase();				setSquare([i,temp%8],(PiecesNames.indexOf(piece_char)*(temp2==piece_char?-1:1)));				temp++;			}		}	}		ActiveColor=(fen_parts[1]=="b")*1;		temp3=fen_parts[2];	WCastling=(~temp3.indexOf("K")?1:0)+(~temp3.indexOf("Q")?2:0);	BCastling=(~temp3.indexOf("k")?1:0)+(~temp3.indexOf("q")?2:0);		EnPassant=fen_parts[3].replace("-","");		HalfMove=(fen_parts[4]*1)||0;	FullMove=(fen_parts[5]*1)||1;		refreshBoard();		if(!postLegalFen()){		setFEN(null);	}}function refreshBoard(){	//updates: Fen, (W/B)KingPos, ActiveChecks	var i,j,piece_char,current_pos,current_val,current_obj,empty_sqrs,new_fen,castling_holder,multi_holder;		castling_holder=["","k","q","kq"];	multi_holder=ActiveColor?[" dra","","b"]:[""," dra","w"];	new_fen="";	WKingPos=null;	BKingPos=null;		for(i=8;i--;){//7...0		empty_sqrs=0;				for(j=0;j<8;j++){//0...7			current_pos=[Math.abs(i-7),j];						current_val=getSquare(current_pos);			current_obj=$("#"+AbcLabels.charAt(j)+""+(i+1));						if(current_val){				if(empty_sqrs){					new_fen+=""+empty_sqrs;					empty_sqrs=0;				}								if(current_val<0){					if(current_val==-6){						BKingPos=current_pos;					}										piece_char=PiecesNames.charAt(-current_val);					current_obj.html("<div class='b"+piece_char+""+multi_holder[0]+"'></div>");					new_fen+=""+piece_char;				}else{					if(current_val==6){						WKingPos=current_pos;					}										piece_char=PiecesNames.charAt(current_val);					current_obj.html("<div class='w"+piece_char+""+multi_holder[1]+"'></div>");					new_fen+=""+piece_char.toUpperCase();				}			}else{				current_obj.html("");				empty_sqrs++;			}		}				if(empty_sqrs){			new_fen+=""+empty_sqrs;		}				new_fen+="/";	}		Fen=new_fen.slice(0,-1)+" "+multi_holder[2]+" "+((castling_holder[WCastling].toUpperCase()+""+castling_holder[BCastling])||"-")+" "+(EnPassant||"-")+" "+HalfMove+" "+FullMove;		ActiveChecks=countChecks(null,null);		createDraggables();		$("#xfen").val(Fen);}function testCollision(from_pos,direction,num_steps,is_knight,prevent_capture,ask_is_attacked){	var i,temp,row,col,current_pos,current_val,current_abs_val,update_row_by,update_col_by,movement_holder,rtn_arr_sqrs,rtn_is_attacked;		rtn_arr_sqrs=[];	rtn_is_attacked=false;	num_steps=is_knight?1:(num_steps||7);		row=from_pos[0];	col=from_pos[1];		movement_holder=is_knight?[[-2,1],[-1,2],[1,2],[2,1],[2,-1],[1,-2],[-1,-2],[-2,-1]]:[[-1,0],[-1,1],[0,1],[1,1],[1,0],[1,-1],[0,-1],[-1,-1]];		temp=movement_holder[direction-1];	update_row_by=temp[0];	update_col_by=temp[1];		for(i=0;i<num_steps;i++){//0<num_steps		row+=update_row_by;		col+=update_col_by;		current_pos=[row,col];				if(!inBoard(current_pos)){			break;		}				current_val=getSquare(current_pos);		current_abs_val=Math.abs(current_val);				if(current_val){			if((ActiveColor&&current_val>0)||(!ActiveColor&&current_val<0)){				if(ask_is_attacked){					if(is_knight){//knight						if(current_abs_val==2){							rtn_is_attacked=true;						}					}else{						if(!i&&current_val==1&&(direction==4||direction==6)){//w_pawn							rtn_is_attacked=true;						}else if(!i&&current_val==-1&&(direction==2||direction==8)){//b_pawn							rtn_is_attacked=true;						}else if(!i&&current_abs_val==6){//king							rtn_is_attacked=true;						}else{							if(((current_abs_val==4||current_abs_val==5)&&(direction%2))||((current_abs_val==3||current_abs_val==5)&&(!(direction%2)))){								rtn_is_attacked=true;							}						}					}				}								if(!prevent_capture&&current_abs_val!=6){					rtn_arr_sqrs.push(current_pos);				}			}						break;		}else{			rtn_arr_sqrs.push(current_pos);		}	}		return [rtn_arr_sqrs,rtn_is_attacked];}function legalMoves(from_pos,piece){	var i,j,len,len2,temp,can_castle,row,col,current_pos,current_val,enpass_pos,pawn_holder,arr_sqrs,rtn_arr,castling,castle_holder,loop_holder;		arr_sqrs=[];	rtn_arr=[];	piece=Math.abs(piece);		if(piece==6){//king		for(i=9;--i;){//8...1			if((temp=testCollision(from_pos,i,1,false,false,false)[0]).length){arr_sqrs.push(temp);}		}		/*blend castle-pawn holder together?*/		castle_holder=ActiveColor?[BCastling,8,0]:[WCastling,1,7];		castling=castle_holder[0];				if(!ActiveChecks&&arrToStr(from_pos)==("e"+castle_holder[1])&&castling){			for(i=2;i--;){//1...0				loop_holder=i?[2,7,3,4,2]:[1,3,2,7,6];								if(castling==3||castling==loop_holder[0]){					if(testCollision(from_pos,loop_holder[1],loop_holder[2],false,true,false)[0].length==loop_holder[2]){						can_castle=true;												for(j=loop_holder[3]-2;j<loop_holder[3];j++){//?...?							if(countChecks(true,[castle_holder[2],j])){								can_castle=false;								break;							}						}												if(can_castle){							arr_sqrs.push([[castle_holder[2],loop_holder[4]]]);						}					}				}			}		}	}else if(piece==5){//queen		for(i=9;--i;){//8...1			if((temp=testCollision(from_pos,i,null,false,false,false)[0]).length){arr_sqrs.push(temp);}		}	}else if(piece==4){//rook		for(i=9;--i;){//7,5,3,1			if((temp=testCollision(from_pos,--i,null,false,false,false)[0]).length){arr_sqrs.push(temp);}		}	}else if(piece==3){//bishop		for(i=9;--i;){//8,6,4,2			if((temp=testCollision(from_pos,i--,null,false,false,false)[0]).length){arr_sqrs.push(temp);}		}	}else if(piece==2){//knight		for(i=9;--i;){//8...1			if((temp=testCollision(from_pos,i,null,true,false,false)[0]).length){arr_sqrs.push(temp);}		}	}else{//pawn		pawn_holder=ActiveColor?[1,5,1,5]:[6,1,-1,2];		row=from_pos[0]+pawn_holder[2];				for(i=2;i--;){//1...0			col=from_pos[1]+(i?1:-1);			current_pos=[row,col];						if(inBoard(current_pos)){				current_val=getSquare(current_pos)*pawn_holder[2];								if(current_val>0&&current_val!=6){					arr_sqrs.push([current_pos]);				}else if(row==pawn_holder[3]&&EnPassant){					enpass_pos=strToArr(EnPassant);										if(enpass_pos[0]==row&&enpass_pos[1]==col){						arr_sqrs.push([current_pos]);					}				}			}		}				if((temp=testCollision(from_pos,pawn_holder[1],((from_pos[0]==pawn_holder[0])?2:1),false,true,false)[0]).length){arr_sqrs.push(temp);}	}		for(i=0,len=arr_sqrs.length;i<len;i++){//0<len		for(j=0,len2=arr_sqrs[i].length;j<len2;j++){			rtn_arr.push(arr_sqrs[i][j]);		}	}		return rtn_arr;/*remove moves that result in check*/}function createDraggables(){	$(".dra").draggable({		cursorAt:{top:21,left:21},		revert:"invalid",		revertDuration:0,		zIndex:100,		scroll:false,		start:function(ev,ui){			//updates: DraggedFrom			var i,len,from_pos,candidates;						DraggedFrom=$(this).parent().attr("id");			from_pos=strToArr(DraggedFrom);			candidates=legalMoves(from_pos,getSquare(from_pos));						for(i=0,len=candidates.length;i<len;i++){				$("#"+arrToStr(candidates[i])).droppable({					drop:function(ev,ui){						var target,piece_html;												target=$(this);						piece_html=$("#"+target.attr("id")+" div");												if(piece_html.length){							piece_html.remove();						}												ui.draggable.removeAttr("style").appendTo(target);					}				}).addClass("highlight");			}		},		stop:function(ev,ui){			//updates: ChessBoard, (W/B)Castling, EnPassant, (Half/Full)Move			var pawn_moved,new_val,old_val,piece_dropped,dropped_string_pos,from_pos,to_pos,pawn_dropped_row,new_enpass,multi_holder,new_castling;						$("td.highlight").droppable("destroy").removeClass("highlight");						piece_dropped=$(this);/*cache class to to don't mess with the DOM too much*/			dropped_string_pos=piece_dropped.parent().attr("id");						if(dropped_string_pos!=DraggedFrom){				/*store PGN in HTML textbox (note: watch for ambiguities)*/								pawn_moved=false;				multi_holder=ActiveColor?["b",8,[0,3],[0,5],-4,[0,0],[0,7],null,[7,6,5,4],BCastling]:["w",1,[7,3],[7,5],4,[7,0],[7,7],null,[2,3,4,5],WCastling];				new_enpass="";				new_castling=multi_holder[9];								if(piece_dropped.hasClass(multi_holder[0]+"p")){//pawn					pawn_moved=true;					pawn_dropped_row=dropped_string_pos.charAt(0);										if(DraggedFrom.charAt(1)==multi_holder[8][0]&&dropped_string_pos.charAt(1)==multi_holder[8][2]){//new enpass						new_enpass=pawn_dropped_row+""+multi_holder[8][1];					}else if(dropped_string_pos==EnPassant){//pawn x enpass						setSquare(strToArr(pawn_dropped_row+""+multi_holder[8][3]),0);					}					/*else if (last row PROMOTION) //HTML combobox with default queen*/				}else if(piece_dropped.hasClass(multi_holder[0]+"r")){//rook					if(new_castling){						if(DraggedFrom==("h"+multi_holder[1])&&new_castling!=2){//short							new_castling--;						}else if(DraggedFrom==("a"+multi_holder[1])&&new_castling!=1){//long							new_castling-=2;						}					}				}else if(piece_dropped.hasClass(multi_holder[0]+"k")){//king					if(DraggedFrom==("e"+multi_holder[1])){						if(dropped_string_pos==("g"+multi_holder[1])){//short							setSquare(multi_holder[3],multi_holder[4]);							setSquare(multi_holder[6],0);						}else if(dropped_string_pos==("c"+multi_holder[1])){//long							setSquare(multi_holder[2],multi_holder[4]);							setSquare(multi_holder[5],0);						}					}										new_castling=0;				}								to_pos=strToArr(dropped_string_pos);				from_pos=strToArr(DraggedFrom);								old_val=getSquare(to_pos);				new_val=getSquare(from_pos);								setSquare(from_pos,0);				setSquare(to_pos,new_val);								HalfMove++;								if(pawn_moved||Math.abs(old_val)==1){					HalfMove=0;				}								if(ActiveColor){					FullMove++;					BCastling=new_castling;				}else{					WCastling=new_castling;				}								EnPassant=new_enpass;								toggleActive();				refreshBoard();			}		}	});}var AbcLabels="abcdefgh";var PiecesNames="*pnbrqk";//W=[p:1][n:2][b:3][r:4][q:5][k:6], B=-([p:1][n:2][b:3][r:4][q:5][k:6])var DefaultFen="rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1";var ChessBoard,Fen;var ActiveColor;//[0:white][1:black]var ActiveChecks;//[n:checks]var WCastling,BCastling;//[0:none][1:short][2:long][3:both]var EnPassant;//["":none]["a1":target]var HalfMove,FullMove;//[n]var WKingPos,BKingPos;//[x,y]var DraggedFrom;var Debug=true;var ConsoleLog=function(str){	if(Debug){		console.log(str);	}};$(function(){	writeBoard(null);		$("#xfen").click(function(){		$(this).select();	});});