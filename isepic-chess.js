/** Copyright (c) 2012 Ajax Isepic (ajax333221) Licensed MIT */var AbcLabels="abcdefgh";var PiecesNames="*pnbrqk";function fixSpacing(rtn_string){	return rtn_string.replace(/^\s+|\s+$/g,"").replace(/\s\s+/g," ");}function bosToPos(bos){	return [Math.abs((bos.charAt(1)*1)-8),AbcLabels.indexOf(bos.charAt(0))];}function posToBos(pos){	return (AbcLabels.charAt(pos[1])+""+Math.abs(pos[0]-8));}function insideBoard(pos){	return ((pos[0]<8&&pos[0]>-1)&&(pos[1]<8&&pos[1]>-1));}function getValue(pos,obj){	return obj.ChessBoard[pos[0]][pos[1]];}function setValue(pos,new_val,obj){	obj.ChessBoard[pos[0]][pos[1]]=new_val;}function toggleActiveColor(obj){	obj.ActiveColor=!obj.ActiveColor;}function setKingPos(new_pos,obj){	if(obj.ActiveColor){		obj.BKingPos=new_pos;	}else{		obj.WKingPos=new_pos;	}}function countChecks(early_break,obj){	var i,j,king_pos,rtn_num_checks;		rtn_num_checks=0;	king_pos=obj.ActiveColor?obj.BKingPos:obj.WKingPos;		outer:	for(i=2;i--;){//1...0		for(j=9;--j;){//8...1			if(testCollision(king_pos,j,null,!i,true,true,null,obj)[1]){				rtn_num_checks++;								if(early_break){					break outer;				}			}		}	}		return rtn_num_checks;}function displayBoard(obj,is_rotated){	var i,j,tmp,tmp2,current_pos,castling_holder,square_color,html_board;		castling_holder=["-","k","q","kq"];		html_board="<table cellpadding='0' cellspacing='0'><tbody>";	square_color=true;		for(i=0;i<8;i++){//0...7		html_board+="<tr>";				for(j=0;j<8;j++){//0...7			current_pos=(is_rotated?[Math.abs(i-7),Math.abs(j-7)]:[i,j]);			tmp=getValue(current_pos,obj);						html_board+="<td class='"+(square_color?"w":"b")+"s "+((tmp<0?"b":"w")+""+PiecesNames.charAt(Math.abs(tmp)))+"' id='"+posToBos(current_pos)+"'></td>";			square_color=!square_color;		}				html_board+="</tr>";		square_color=!square_color;	}		html_board+="</tbody></table>";		/*rewrite this v*/	html_board+="<input id='xfen' type='text' value='"+obj.Fen+"' />"	+"<br><pre style='display:inline;'>to move:</pre> <span style='color:#546AC1;'>"+(obj.ActiveColor?"b":"w")+"</span>"	+"<br><pre style='display:inline;'>active checks:</pre> <span style='color:#546AC1;'>"+obj.ActiveChecks+"</span>"	+"<br><pre style='display:inline;'>en passant:</pre> <span style='color:#546AC1;'>"+(obj.EnPassantBos||"-")+"</span>"	+"<br><pre style='display:inline;'>w_castling:</pre> <span style='color:#546AC1;'>"+(castling_holder[obj.WCastling].toUpperCase())+"</span>"	+"<br><pre style='display:inline;'>b_castling:</pre> <span style='color:#546AC1;'>"+(castling_holder[obj.BCastling])+"</span>"	+"<br><pre style='display:inline;'>w_king pos:</pre> <span style='color:#546AC1;'>"+posToBos(obj.WKingPos)+"</span>"	+"<br><pre style='display:inline;'>b_king pos:</pre> <span style='color:#546AC1;'>"+posToBos(obj.BKingPos)+"</span>"	+"<br><pre style='display:inline;'>half moves:</pre> <span style='color:#546AC1;'>"+obj.HalfMove+"</span>"	+"<br><pre style='display:inline;'>full moves:</pre> <span style='color:#546AC1;'>"+obj.FullMove+"</span>";		tmp2=$("#xchessboard");		if(!tmp2.length){		$("body").append("<div id='xchessboard'>"+html_board+"</div>");	}else{		tmp2.html(html_board);	}}function initBoard(nam,complete_fen){	var i,j,len,temp,temp2,target_board,ranks,current_file,skip_files,piece_char,fen_parts;		/*do a check to make sure if the global already exist? specially when it doesnt have 'Fen' (or any other) property?*/		window[nam]={		ChessBoard:null,		Fen:null,		ActiveColor:null,		ActiveChecks:null,		WCastling:null,		BCastling:null,		EnPassantBos:null,		HalfMove:null,		FullMove:null,		WKingPos:null,		BKingPos:null	};		target_board=window[nam];		target_board.ChessBoard=new Array(8);		for(i=8;i--;){//7...0		target_board.ChessBoard[i]=[0,0,0,0,0,0,0,0];	}		if(typeof complete_fen!=="string"){		complete_fen="";	}		complete_fen=fixSpacing(complete_fen);	fen_parts=(preFenValidation(complete_fen)?complete_fen:"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1").split(" ");	ranks=fen_parts[0].split("/");		for(i=8;i--;){//7...0		current_file=0;				for(j=0,len=ranks[i].length;j<len;j++){//0<len			temp=ranks[i].charAt(j);			skip_files=(temp*1);						if(!skip_files){				piece_char=temp.toLowerCase();				setValue([i,current_file],(PiecesNames.indexOf(piece_char)*(temp==piece_char?-1:1)),target_board);			}						current_file+=(skip_files||1);						//old:			//			//if(skip_files){			//	current_file+=skip_files;			//}else{			//	piece_char=temp.toLowerCase();			//	setValue([i,current_file],(PiecesNames.indexOf(piece_char)*(temp==piece_char?-1:1)),target_board);			//	current_file++;			//}		}	}		target_board.ActiveColor=(fen_parts[1]=="b");		temp2=fen_parts[2];	target_board.WCastling=(~temp2.indexOf("K")?1:0)+(~temp2.indexOf("Q")?2:0);	target_board.BCastling=(~temp2.indexOf("k")?1:0)+(~temp2.indexOf("q")?2:0);		target_board.EnPassantBos=fen_parts[3].replace("-","");		target_board.HalfMove=(fen_parts[4]*1)||0;	target_board.FullMove=(fen_parts[5]*1)||1;		nodomTest(target_board);		if(!postFenValidation(target_board)){		initBoard(nam,null);	}}function nodomTest(obj){	var i,j,piece_char,current_pos,current_val,current_abs_val,empty_squares,new_fen_first,castling_holder,is_white;		castling_holder=["","k","q","kq"];	new_fen_first="";		for(i=0;i<8;i++){//0...7		empty_squares=0;				for(j=0;j<8;j++){//0...7			current_pos=[i,j];						current_val=getValue(current_pos,obj);			current_abs_val=Math.abs(current_val);						if(current_val){				is_white=(current_val>0);								if(empty_squares){					new_fen_first+=""+empty_squares;					empty_squares=0;				}								if(current_abs_val>5){//old: (x==6)					if(is_white){						obj.WKingPos=current_pos;					}else{						obj.BKingPos=current_pos;					}				}								piece_char=PiecesNames.charAt(current_abs_val);				new_fen_first+=""+(is_white?piece_char.toUpperCase():piece_char);			}else{				empty_squares++;			}		}				new_fen_first+=""+(empty_squares||"")+"/";//old: if(empty_squares){new_fen_first+=""+empty_squares;}new_fen_first+="/";	}		obj.Fen=(new_fen_first.slice(0,-1)+" "+(obj.ActiveColor?"b":"w")+" "+((castling_holder[obj.WCastling].toUpperCase()+""+castling_holder[obj.BCastling])||"-")+" "+(obj.EnPassantBos||"-")+" "+obj.HalfMove+" "+obj.FullMove);		obj.ActiveChecks=countChecks(false,obj);}function preFenValidation(complete_fen){	var i,j,len,temp,last_is_num,current_is_num,rexp,ranks,piece_char,num_pieces,fen_first,fen_first_len,num_files,keep_going,rtn_is_legal;		rtn_is_legal=false;		if(complete_fen){		if(/^([rnbqkpRNBQKP1-8]+\/){7}([rnbqkpRNBQKP1-8]+)\s[bw]\s(-|K?Q?k?q?)\s(-|[a-h][36])/.test(complete_fen)){			fen_first=complete_fen.split(" ",1)[0];			fen_first_len=fen_first.length;						if(((fen_first_len-fen_first.replace(/K/g,"").length)==1)&&((fen_first_len-fen_first.replace(/k/g,"").length)==1)){				ranks=fen_first.split("/");								if(!/p/gi.test(ranks[0]+""+ranks[7])){/*mejor usar "([rnbqkRNBQK1-8]+\/)([rnbqkpRNBQKP1-8]+\/){6}([rnbqkRNBQK1-8]+)\s[bw]...."*/					keep_going=true;										outer:					for(i=8;i--;){//7...0						num_files=0;						last_is_num=false;												for(j=0,len=ranks[i].length;j<len;j++){//0<len							temp=(ranks[i].charAt(j)*1);							current_is_num=!!temp;														if(last_is_num&&current_is_num){								keep_going=false;								break outer;							}														last_is_num=current_is_num;														num_files+=(temp||1);						}												if(num_files-8){//old: (x!=8)							keep_going=false;							break;						}					}										if(keep_going){						for(i=2;i--;){//1...0							num_pieces=new Array(5);														for(j=5;j--;){//4...0								piece_char=PiecesNames.charAt(j+1);								if(i){piece_char=piece_char.toUpperCase();}																rexp=new RegExp(piece_char,"g");								num_pieces[j]=fen_first_len-(fen_first.replace(rexp,"").length);							}														if(!((num_pieces[0]<9)&&((Math.max(num_pieces[1]-2,0)+Math.max(num_pieces[2]-2,0)+Math.max(num_pieces[3]-2,0)+Math.max(num_pieces[4]-1,0))<=(8-num_pieces[0])))){								keep_going=false;								break;							}						}												if(keep_going){							rtn_is_legal=true;						}					}				}			}		}	}		return rtn_is_legal;}function postFenValidation(obj){	var i,j,k,temp,temp2,temp3,keep_going,enpass_pos,castling_availity,king_rank,enpass_rank,enpass_file,fen_first,num_pawns,missing_capturables,min_captured,min_captured_holder,castle_holder,rtn_is_legal;		rtn_is_legal=false;		if(obj.WKingPos&&obj.BKingPos){		if((getValue(obj.WKingPos,obj)>5)&&(getValue(obj.BKingPos,obj)<-5)){//old: (y==6 && x==-6)			if(obj.ActiveChecks<3){				toggleActiveColor(obj);				keep_going=!countChecks(true,obj);				toggleActiveColor(obj);								if(keep_going){					if(obj.EnPassantBos){						keep_going=false;						enpass_pos=bosToPos(obj.EnPassantBos);						enpass_rank=enpass_pos[0];						enpass_file=enpass_pos[1];												if(!getValue(enpass_pos,obj)){							if(obj.ActiveColor){								temp=5;								temp2=1;							}else{								temp=2;								temp2=-1;							}														if(enpass_rank==temp&&!getValue([enpass_rank+temp2,enpass_file],obj)&&(getValue([enpass_rank+(-temp2),enpass_file],obj)==temp2)){								keep_going=true;							}						}					}										if(keep_going){						fen_first=obj.Fen.split(" ")[0];												for(i=2;i--;){//1...0							missing_capturables=15-(fen_first.length-(fen_first.replace((i?/p|n|b|r|q/g:/P|N|B|R|Q/g),"").length));							min_captured=0;														for(j=8;j--;){//7...0								min_captured_holder=((j>6)||!j)?[1,3,6,10,99]:[1,2,4,6,9];//old: (j==7 || j==0)								temp3="..";																for(k=8;k--;){//7...0									temp3+=(getValue([k,j],obj)||"")+"..";								}																num_pawns=temp3.match(i?/\.1\./g:/\.-1\./g);								num_pawns=(num_pawns?num_pawns.length:0);																if(num_pawns>1){									min_captured+=min_captured_holder[num_pawns-2];								}							}														if(min_captured>missing_capturables){								keep_going=false;								break;							}						}												if(keep_going){							for(i=2;i--;){//1...0								castle_holder=i?[0,-6,-4,obj.BCastling]:[7,6,4,obj.WCastling];								king_rank=castle_holder[0];								castling_availity=castle_holder[3];																if(castling_availity){									if(getValue([king_rank,4],obj)!=castle_holder[1]){										keep_going=false;									}else if(castling_availity!=2&&(getValue([king_rank,7],obj)!=castle_holder[2])){//old: (x==1 || x==3)										keep_going=false;									}else if((castling_availity>1)&&(getValue([king_rank,0],obj)!=castle_holder[2])){//old2: (x!=1), old: (x==2 || x==3)										keep_going=false;									}								}																if(!keep_going){									break;								}							}														if(keep_going){								rtn_is_legal=true;							}						}					}				}			}		}	}		return rtn_is_legal;}function testCollision(initial_pos,piece_direction,num_squares,is_knight,prevent_capture,request_is_attacked,ally_val,obj){	var i,temp,current_rank,current_file,current_pos,current_val,current_abs_val,move_rank_by,move_file_by,movement_holder,rtn_arr_pos,rtn_is_attacked,rtn_ally_pos;		rtn_arr_pos=[];	rtn_is_attacked=false;	rtn_ally_pos=[];	num_squares=(is_knight?1:(num_squares||7));/*NO use math max 7, even if 999 the loop breaks on outside board*/		movement_holder=is_knight?[[-2,1],[-1,2],[1,2],[2,1],[2,-1],[1,-2],[-1,-2],[-2,-1]]:[[-1,0],[-1,1],[0,1],[1,1],[1,0],[1,-1],[0,-1],[-1,-1]];		temp=movement_holder[piece_direction-1];	move_rank_by=temp[0];	move_file_by=temp[1];		current_rank=initial_pos[0];	current_file=initial_pos[1];		for(i=0;i<num_squares;i++){//0<num_squares		current_rank+=move_rank_by;		current_file+=move_file_by;		current_pos=[current_rank,current_file];				if(!insideBoard(current_pos)){			break;		}				current_val=getValue(current_pos,obj);		current_abs_val=Math.abs(current_val);				if(current_val){			if((current_val*(obj.ActiveColor?1:-1))>0){//old: if((obj.ActiveColor&&current_val>0)||(!obj.ActiveColor&&current_val<0)){				if(request_is_attacked){					if(is_knight){						if(current_abs_val==2){//knight							rtn_is_attacked=true;						}					}else if(current_abs_val>5){//king, old: (x==6)						if(!i){							rtn_is_attacked=true;						}					}else if(current_abs_val>4){//queen, old: (x==5)						rtn_is_attacked=true;					}else if(piece_direction%2){						if(current_abs_val>3){//rook, old: (x==4)							rtn_is_attacked=true;						}										/*NO >2, we can collide with rooks*/					}else if(current_abs_val==3){//bishop						rtn_is_attacked=true;					}else if(!i&&current_abs_val<2){//old: (... && x==1)						if(~current_val){//w_pawn							if(piece_direction==4||piece_direction==6){								rtn_is_attacked=true;							}						}else{//b_pawn							/*NO merge in a single else if, the minimizer will do this*/							if(piece_direction<3||piece_direction>7){//old: (x==2 || x==8)								rtn_is_attacked=true;							}						}					}				}								if(!prevent_capture&&current_abs_val<6){//old: (... && x!=6)					rtn_arr_pos.push(current_pos);				}			}else if(Math.abs(ally_val)==current_abs_val){				rtn_ally_pos=current_pos;			}						break;		}else{			rtn_arr_pos.push(current_pos);		}	}		return [rtn_arr_pos,rtn_is_attacked,rtn_ally_pos];}function legalMoves(piece_pos,piece_val,obj){	var i,j,len,len2,temp,temp_board,facing_rank,current_adjacent_file,piece_abs_val,current_pos,diagonal_pawn_pos,current_val,enpass_pos,pre_validated_arr_pos,castling_availity,can_castle,is_king,is_knight,captured_en_passant,piece_rank,castle_holder,loop_holder,pawn_holder,rtn_validated_arr_pos;		pre_validated_arr_pos=[];	rtn_validated_arr_pos=[];	piece_abs_val=Math.abs(piece_val);	is_king=(piece_abs_val>5);/*NO mover adentro del if, es riesgoso, se usa afuera pero en teoria no deberia haber problemas pero...*///old: (x==6)	captured_en_passant="";		window["xlegal"]=JSON.parse(JSON.stringify(obj));/*checar si existe, etc? (igual q el otro)*/	temp_board=window["xlegal"];		if(piece_abs_val){		if(is_king){//king			for(i=9;--i;){//8...1				if((temp=testCollision(piece_pos,i,1,false,false,false,null,temp_board)[0]).length){pre_validated_arr_pos.push(temp);}			}						castle_holder=temp_board.ActiveColor?[temp_board.BCastling,8,0,temp_board.BKingPos]:[temp_board.WCastling,1,7,temp_board.WKingPos];			castling_availity=castle_holder[0];						if(castling_availity&&!temp_board.ActiveChecks&&posToBos(piece_pos)==("e"+castle_holder[1])){				for(i=2;i--;){//1...0					loop_holder=i?[1,7,3,4,2]:[2,3,2,7,6];										if(castling_availity!=loop_holder[0]){						if(testCollision(piece_pos,loop_holder[1],loop_holder[2],false,true,false,null,temp_board)[0].length==loop_holder[2]){							can_castle=true;														for(j=loop_holder[3]-2;j<loop_holder[3];j++){//5...6 or 2...3								setKingPos([castle_holder[2],j],temp_board);																if(countChecks(true,temp_board)){									can_castle=false;									break;								}							}														if(can_castle){								pre_validated_arr_pos.push([[castle_holder[2],loop_holder[4]]]);							}						}					}				}								setKingPos(castle_holder[3],temp_board);/*not really necessary to undo?*/			}		}else if(piece_abs_val<2){//pawn, old: (x==1)			pawn_holder=temp_board.ActiveColor?[1,5,1,5]:[6,1,-1,2];			piece_rank=piece_pos[0];						if((temp=testCollision(piece_pos,pawn_holder[1],((piece_rank==pawn_holder[0])+1),false,true,false,null,temp_board)[0]).length){pre_validated_arr_pos.push(temp);}//old: ((piece_rank==pawn_holder[0])?2:1)						facing_rank=(piece_rank+pawn_holder[2]);						for(i=2;i--;){//1...0				current_adjacent_file=piece_pos[1]+(i?1:-1);				diagonal_pawn_pos=[facing_rank,current_adjacent_file];								if(insideBoard(diagonal_pawn_pos)){					current_val=(getValue(diagonal_pawn_pos,temp_board)*pawn_holder[2]);										/*NO use (x && ...), we have negative numbers too*/					if(current_val>0&&current_val<6){//old2: (x>0 && x!=6), old: if(((temp_board.ActiveColor&&current_val>0)||(!temp_board.ActiveColor&&current_val<0))&&current_val!=6){						pre_validated_arr_pos.push([diagonal_pawn_pos]);					}else if(facing_rank==pawn_holder[3]&&temp_board.EnPassantBos){						enpass_pos=bosToPos(temp_board.EnPassantBos);												if(enpass_pos[0]==facing_rank&&enpass_pos[1]==current_adjacent_file){							captured_en_passant=posToBos([piece_rank,current_adjacent_file]);							pre_validated_arr_pos.push([diagonal_pawn_pos]);						}					}				}			}		}else{//queen, knight, rook and bishop			is_knight=(piece_abs_val<3);//old: (x==2)						for(i=(piece_abs_val-3?9:1);--i;){//7,5,3,1, old: (x!=3?9:1)				if((temp=testCollision(piece_pos,--i,null,is_knight,false,false,null,temp_board)[0]).length){pre_validated_arr_pos.push(temp);}			}						for(i=(piece_abs_val-4?9:1);--i;){//8,6,4,2, old: (x!=4?9:1)				if((temp=testCollision(piece_pos,i--,null,is_knight,false,false,null,temp_board)[0]).length){pre_validated_arr_pos.push(temp);}			}		}	}		for(i=0,len=pre_validated_arr_pos.length;i<len;i++){//0<len		for(j=0,len2=pre_validated_arr_pos[i].length;j<len2;j++){//0<len2			temp_board=JSON.parse(JSON.stringify(obj));			current_pos=pre_validated_arr_pos[i][j];						setValue(piece_pos,0,temp_board);			setValue(current_pos,piece_val,temp_board);						if(is_king){				setKingPos(current_pos,temp_board);			}else if(captured_en_passant&&(posToBos(current_pos)==temp_board.EnPassantBos)){				setValue(bosToPos(captured_en_passant),0,temp_board);			}						if(!countChecks(true,temp_board)){				rtn_validated_arr_pos.push(current_pos);			}		}	}		return rtn_validated_arr_pos;}function xTest(){	var n,rtn;		/*proofread when finish*/		/*test agregar 8/8/8/3k4/4PpP1/8/3K4/8 b - e3 0 1	console.log(legalMoves(bosToPos("f4"),-1,e).join("--"));*/		initBoard("xtest","8/8/8/8/1k6/5p2/4P3/1K6 w - - 0 1 ");	rtn="";		for(n in xtest){		if(xtest.hasOwnProperty(n)){			rtn+=((n.charAt(0))+":"+xtest[n]+"").replace(/0,0/g,"*");		}	}		rtn+=fixSpacing(" tr  im ");	rtn+=(posToBos(bosToPos("e4"))==="e4")*1;	rtn+=(insideBoard([8,8]))*1+""+(insideBoard([7,7]))*1+""+(insideBoard([0,0]))*1;	rtn+=(getValue(xtest.BKingPos,xtest)===-6)*1;		xtest=null;		if(rtn!=="C:*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,*,0,-6,*,*,*,*,*,0,-1,*,*,*,1,*,*,6,*,*,*F:8/8/8/8/1k6/5p2/4P3/1K6 w - - 0 1A:falseA:0W:0B:0E:H:0F:1W:7,1B:4,1tr im10111"){		return "failed #1";	}		initBoard("xtest"," rnb1k3/pp1ppp2/8/q7/8/8/1PP1PPPP/RNBQK2R w KQq - 0 1");	rtn="";		for(n in xtest){		if(xtest.hasOwnProperty(n)){			rtn+=((n.charAt(0))+":"+xtest[n]+"").replace(/0,0/g,"*");		}	}		rtn+=fixSpacing(" tr  im ");	rtn+=(posToBos(bosToPos("e4"))==="e4")*1;	rtn+=(insideBoard([8,8]))*1+""+(insideBoard([7,7]))*1+""+(insideBoard([0,0]))*1;	rtn+=(getValue(xtest.WKingPos,xtest)==6)*1;	rtn+=(legalMoves(bosToPos("c2"),1,xtest).join("--")==="5,2")*1;	rtn+=(legalMoves(bosToPos("b1"),2,xtest).join("--")==="5,2--6,3")*1;	rtn+=(legalMoves(bosToPos("c1"),3,xtest).join("--")==="6,3")*1;	rtn+=(legalMoves(bosToPos("b2"),1,xtest).join("--")==="4,1")*1;	rtn+=(legalMoves(bosToPos("e1"),6,xtest).join("--")==="7,5")*1;	rtn+=(legalMoves(bosToPos("a1"),4,xtest).join("--")==="3,0")*1;		xtest=null;		if(rtn!=="C:-4,-2,-3,0,-6,*,0,-1,-1,0,-1,-1,-1,*,*,*,*,*,-5,*,*,*,*,*,*,*,*,*,*,*,*,1,1,0,1,1,1,1,4,2,3,5,6,*,4F:rnb1k3/pp1ppp2/8/q7/8/8/1PP1PPPP/RNBQK2R w KQq - 0 1A:falseA:1W:3B:2E:H:0F:1W:7,4B:0,4tr im10111111111"){		return "failed #2";	}		/*collitions (ally)*/	/*enpassants*/	/*castlings*/	/*lots of illegal position must == default fen*/		return ":)";}/*function draggableStart(){	//updates: FromBos	var i,len,initial_pos,candidates;		FromBos=$(this).parent().attr("id");	initial_pos=bosToPos(FromBos);	candidates=legalMoves(initial_pos,getValue(initial_pos));		for(i=0,len=candidates.length;i<len;i++){//0<len		$("#"+posToBos(candidates[i])).droppable({			drop:function(ev,ui){				var destination_square_elm,capturable_piece_elm;								destination_square_elm=$(this);				capturable_piece_elm=$("#"+destination_square_elm.attr("id")+" div");								if(capturable_piece_elm.length){					capturable_piece_elm.remove();				}								ui.draggable.removeAttr("style").appendTo(destination_square_elm);			}		}).addClass("highlight");	}}function draggableStop(){	//updates: ChessBoard, (W/B)Castling, EnPassantBos, (Half/Full)Move	var pgn_string_num,pgn_move,pawn_moved,promoted_val,piece_moved,piece_moved_class,piece_val,from_pos,to_pos,destination_bos,destination_file_char,destination_rank_char,new_enpass_bos,new_active_castling_availity,new_nonactive_castling_availity,king_castled,multi_holder;		$("td.highlight").droppable("destroy").removeClass("highlight");		piece_moved=$(this);	piece_moved_class=(" "+piece_moved.attr("class")+" ");	destination_bos=piece_moved.parent().attr("id");		if(destination_bos!=FromBos){		pawn_moved=false;		promoted_val=null;		multi_holder=ActiveColor?[" b",8,[0,3],[0,5],-4,[0,0],[0,7],[7,6,5,4],BCastling,"1",-1,WCastling,1]:[" w",1,[7,3],[7,5],4,[7,0],[7,7],[2,3,4,5],WCastling,"8",1,BCastling,8];		new_enpass_bos="";		new_active_castling_availity=multi_holder[8];		new_nonactive_castling_availity=multi_holder[11];		piece_val=null;		king_castled=null;				from_pos=bosToPos(FromBos);		to_pos=bosToPos(destination_bos);				if(~piece_moved_class.indexOf(multi_holder[0]+"p ")){//pawn			piece_val=1;			pawn_moved=true;			destination_file_char=destination_bos.charAt(0);			destination_rank_char=destination_bos.charAt(1);						if(FromBos.charAt(1)==multi_holder[7][0]&&destination_rank_char==multi_holder[7][2]){//new enpass				new_enpass_bos=(destination_file_char+""+multi_holder[7][1]);			}else if(destination_bos==EnPassantBos){//pawn x enpass				setValue(bosToPos(destination_file_char+""+multi_holder[7][3]),0);			}else if(destination_rank_char==multi_holder[9]){//promotion				promoted_val=($("#xpromote").val()*multi_holder[10]);			}		}else if(~piece_moved_class.indexOf(multi_holder[0]+"n ")){//knight			piece_val=2;		}else if(~piece_moved_class.indexOf(multi_holder[0]+"b ")){//bishop			piece_val=3;		}else if(~piece_moved_class.indexOf(multi_holder[0]+"r ")){//rook			piece_val=4;			new_active_castling_availity=cornerRookTest(new_active_castling_availity,FromBos,multi_holder[1]);		}else if(~piece_moved_class.indexOf(multi_holder[0]+"q ")){//queen			piece_val=5;		}else if(~piece_moved_class.indexOf(multi_holder[0]+"k ")){//king			piece_val=6;			new_active_castling_availity=0;						if(FromBos==("e"+multi_holder[1])){				if(destination_bos==("g"+multi_holder[1])){//short					king_castled=1;					setValue(multi_holder[3],multi_holder[4]);					setValue(multi_holder[6],0);				}else if(destination_bos==("c"+multi_holder[1])){//long					king_castled=2;					setValue(multi_holder[2],multi_holder[4]);					setValue(multi_holder[5],0);				}			}		}				pgn_string_num=ActiveColor?"":(FullMove+".");		pgn_move=getMove(from_pos,to_pos,(piece_val*multi_holder[10]),promoted_val,king_castled);				HalfMove++;		if(pawn_moved||getValue(to_pos)){			HalfMove=0;		}				new_nonactive_castling_availity=cornerRookTest(new_nonactive_castling_availity,destination_bos,multi_holder[12]);				if(ActiveColor){			FullMove++;			BCastling=new_active_castling_availity;			WCastling=new_nonactive_castling_availity;		}else{			WCastling=new_active_castling_availity;			BCastling=new_nonactive_castling_availity;		}				EnPassantBos=new_enpass_bos;				setValue(to_pos,(promoted_val||getValue(from_pos)));		setValue(from_pos,0);				toggleActiveColor();		refreshBoard();				$("#xpgn").val($("#xpgn").val()+""+pgn_string_num+pgn_move+(ActiveChecks?"+":"")+" ");	}}function createDraggables(){	$(".dra").draggable({		cursorAt:{top:21,left:21},		revert:"invalid",		revertDuration:0,		zIndex:100,		scroll:false,		start:draggableStart,		stop:draggableStop	});}function getMove(initial_pos,final_pos,piece_val,promotion_val,castling_val){	var i,len,temp,temp2,temp3,piece_abs_val,initial_bos,initial_file_char,initial_rank_char,destination_bos,destination_file_char,collition_bos,ambiguity,is_knight,rtn_new_move;		rtn_new_move="";	initial_bos=posToBos(initial_pos);	initial_file_char=initial_bos.charAt(0);	initial_rank_char=initial_bos.charAt(1);		destination_bos=posToBos(final_pos);	destination_file_char=destination_bos.charAt(0);		piece_abs_val=Math.abs(piece_val);		if(piece_abs_val==1){//pawn		if(initial_file_char!=destination_file_char){			rtn_new_move+=(initial_file_char+"x");		}				rtn_new_move+=destination_bos;				if(promotion_val){			rtn_new_move+=("="+PiecesNames.charAt(Math.abs(promotion_val)).toUpperCase());		}	}else if(castling_val){//castling king		rtn_new_move+=(castling_val>1?"O-O-O":"O-O");	}else{//knight, bishop, rook, queen, non-castling king		rtn_new_move+=PiecesNames.charAt(piece_abs_val).toUpperCase();				if(piece_abs_val!=6){			temp2=[];			is_knight=(piece_abs_val==2);//-----------(piece_abs_val<3)?						for(i=(piece_abs_val!=3?9:1);--i;){//7,5,3,1				if((temp=testCollision(final_pos,--i,null,is_knight,false,false,piece_val)[2]).length){temp2.push(temp);}			}						for(i=(piece_abs_val!=4?9:1);--i;){//8,6,4,2				if((temp=testCollision(final_pos,i--,null,is_knight,false,false,piece_val)[2]).length){temp2.push(temp);}			}						len=temp2.length;			if(len>1){				temp3="";								for(i=0;i<len;i++){//0<len					collition_bos=posToBos(temp2[i]);										if(collition_bos!=initial_bos){						if(~(legalMoves(temp2[i],piece_val).join("")).indexOf(final_pos.join())){							temp3+=collition_bos;						}					}				}								ambiguity=(!!(~temp3.indexOf(initial_file_char))*1)+(!!(~temp3.indexOf(initial_rank_char))*2);								if(ambiguity>2){					rtn_new_move+=(initial_file_char+""+initial_rank_char);				}else if(ambiguity==1){					rtn_new_move+=initial_rank_char;				}else{					rtn_new_move+=initial_file_char;				}			}		}				if(getValue(final_pos)){			rtn_new_move+="x";		}				rtn_new_move+=destination_bos;	}		return rtn_new_move;}function cornerRookTest(rtn_castling_avility,corner_bos,promotion_rank){	if(rtn_castling_avility){		if(corner_bos==("h"+promotion_rank)&&rtn_castling_avility!=2){//short			rtn_castling_avility--;		}else if(corner_bos==("a"+promotion_rank)&&rtn_castling_avility>1){//long			rtn_castling_avility-=2;		}	}		return rtn_castling_avility;}function writeBoard(complete_fen){	var i,j,square_color,html_board;		if(!$("#xchessboard").length){		html_board="<div id='xchessboard'><table cellpadding='0' cellspacing='0'><tbody>";		square_color=true;				for(i=0;i<8;i++){//0...7			html_board+="<tr>";						for(j=0;j<8;j++){//0...7				html_board+="<td class='"+(square_color?"w":"b")+"s' id='"+posToBos([i,j])+"'></td>";				square_color=!square_color;			}						square_color=!square_color;			html_board+="</tr>";		}				html_board+="</tbody></table><input id='xfen' type='text' /><textarea id='xpgn'></textarea>promote to:<select id='xpromote'><option selected='selected' value='5'>queen</option><option value='4'>rook</option><option value='3'>bishop</option><option value='2'>knight</option></select></div>";				$("body").append(html_board);	}		setFEN(complete_fen);}function refreshBoard(){	//updates: Fen, (W/B)KingPos, ActiveChecks	var i,j,piece_char,current_pos,current_val,current_abs_val,current_square_elm,empty_squares,new_fen,castling_holder,multi_holder,mini_holder;		castling_holder=["","k","q","kq"];	multi_holder=ActiveColor?[" dra","","b"]:[""," dra","w"];	new_fen="";	WKingPos=null;	BKingPos=null;		for(i=0;i<8;i++){//0...7		empty_squares=0;				for(j=0;j<8;j++){//0...7			current_pos=[i,j];						current_val=getValue(current_pos);			current_abs_val=Math.abs(current_val);			current_square_elm=$("#"+posToBos(current_pos));						if(current_val){				mini_holder=(current_val<0)?["b",multi_holder[0],false]:["w",multi_holder[1],true];								if(empty_squares){					new_fen+=""+empty_squares;					empty_squares=0;				}								if(current_abs_val==6){					if(mini_holder[2]){						WKingPos=current_pos;					}else{						BKingPos=current_pos;					}				}								piece_char=PiecesNames.charAt(current_abs_val);				current_square_elm.html("<div class='"+mini_holder[0]+piece_char+""+mini_holder[1]+"'></div>");				new_fen+=""+(mini_holder[2]?piece_char.toUpperCase():piece_char);			}else{				current_square_elm.html("");				empty_squares++;			}		}				if(empty_squares){			new_fen+=""+empty_squares;		}				new_fen+="/";	}		Fen=(new_fen.slice(0,-1)+" "+multi_holder[2]+" "+((castling_holder[WCastling].toUpperCase()+""+castling_holder[BCastling])||"-")+" "+(EnPassantBos||"-")+" "+HalfMove+" "+FullMove);		ActiveChecks=countChecks(false);		createDraggables();		$("#xfen").val(Fen);}*/